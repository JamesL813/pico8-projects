pico-8 cartridge // http://www.pico-8.com
version 32
__lua__

function _init()
	state="game"
	
	--timer:iterates every frame
	t=0
	
	--levels:1,2,3,4
	level=1
	
	--background color
	bgc=12
	
	--camera coordinates
	--cam_x=0
	--cam_y=0
	
	--map limits
	map_start_x=0
	map_start_y=level*128 - 128
	map_end_x=2048
	map_end_y=level*128
	
	--physics constants
	grav=.22
	fric=0.85
	
	--player object
	p={
		sp=2,
		w=8,
		h=8,
		x=12,  y=102+level*128-128,
		dx=0,  dy=0,
		acc=0.2,
		max_dx=2,
		max_dy=3,
		jump=4, --jump boost
		flp=false,
		
		--# of frames between each
		--anim frame
		run_cd=2,
		
		--sprite order for run anim 
		run_anim = {3,2,1,5,1,2,3,5},
		
		--current run anim index
		run_i=1,
		
		idle=true,
		landed=true,
		running=false,
		jumping=false,
		falling=false,
		sliding=false,
		
		--p_ups
		big==false,
		fire==false,
		invin==false,
		inv_t==0,
		
		dead=false
	}
	
	--initialize enemies
	enemies={}
	blocks={}
	
	scan_enemies()
	scan_blocks()
	
	coins={}
	p_ups={}
	
	
	
	--test
	r1={x1=0,y1=0,x2=0,y2=0}
	r2={x1=0,y1=0,x2=0,y2=0}
	
	
end

function _update60()
	t+=1
	if state=="game" then
		update_game()
	elseif state=="dead" then
		update_dead()
	end
end

function _draw()
	if state=="game" then
		draw_game()
	elseif state=="dead" then
		draw_dead()
	end
end


-->8
--states
function update_game()
	update_player()
	
	for e in all(enemies) do
		update_enemy(e)
	end
	
	for c in all(coins) do
		update_coin(c)
	end
	
	for b in all(blocks) do
		update_block(b)
	end
	
	for pu in all(p_ups) do
		update_p_up(pu)
	end
	
	cam_x=mid(0,
	 p.x-64+(p.w/2),896)
	cam_y=level*128 - 128
	
	camera(cam_x,cam_y)
end

function draw_game()
	
	cls(bgc)
	map(0,0)
	
	
	
	for e in all(enemies) do
		draw_enemy(e)
	end
	
	for c in all(coins) do
		draw_coin(c)
	end
	
	for pu in all(p_ups) do
		draw_p_up(pu)
	end
	
	--for b in all(blocks) do
		--print(b.sp)
	--end
	
	draw_player()
	
	--testing
	--print(#coins,p.x,p.y-8)
	--rect(r1.x1,r1.y1,r1.x2,r1.y2,0)
	--rect(r2.x1,r2.y1,r2.x2,r2.y2,0)
	
end

function update_dead()
	update_player()
end

function draw_dead()
	cls(12)
	map(0,0)
	
	for e in all(enemies) do
		draw_enemy(e)
	end
	
	draw_player()
end


-->8
--player

function update_player()

	if p.dead then p.sp=8
		
		p.run_cd+=1
		if p.run_cd>0 then
			p.dy+=grav
			p.y+=lim_spd(p.dy,p.max_dy)
		end
		return 
	end
	
	--left input
	if btn(‚¨ÖÔ∏è) and 
	 not btn(‚û°Ô∏è) then
		p.flp=true
		
		p.dx-=p.acc
		
		p.running=true
		p.sliding=false  
	end
	
	--left collision
	if collide_map(p,"left",0)
	 and p.dx<0
		then p.dx=0 --p.x=p.x+1-p.x%8
	end
	
	--right input
	if btn(‚û°Ô∏è) and 
	not btn(‚¨ÖÔ∏è) then
		p.flp=false
		
		p.dx+=p.acc
		
		p.running=true
		p.sliding=false
	end
	
	--right collision
	if collide_map(p,"right",0)
	 and p.dx>0 then 
		p.dx=0	--p.x=p.x-p.x%8
	end
	
	--no x input
	if (btn(‚¨ÖÔ∏è) and btn(‚û°Ô∏è))
	 or (not btn(‚¨ÖÔ∏è) and 
	 not btn(‚û°Ô∏è)) then
		p.dx*=fric
		if abs(p.dx)>0.2 then
			p.sliding=true
		else
			p.sliding=false
		end
		p.running=false
	end
	
	--ground collision
	if not collide_map(p,"down",0) then
		--gravity
		p.dy+=grav
	else
		p.y-=p.y%8
		p.dy=0
		p.jumping=false
	end
	
	
	
	--jumping
	if btnp(‚ùé) and 
	 not p.jumping then
		p.dy=-p.jump
		p.jumping=true
		sfx(0)
	end
	
	--sprinting
	if btn(üÖæÔ∏è) then
		p.max_dx=4
	else
		p.max_dx=2
	end
	
	--falling
	if p.dy>.1 then
		p.falling=true
	else
		p.falling=false
	end
	
	--up collision
	if collide_map(p,"up",0) and
	 p.dy<0 then
	  p.dy=0 
	 
	 	--if collide_map(p,"up",1) then
	 		--break_block(p)
	 	--end
	  
	end
	
	--speed limits
	if p.dx>p.max_dx then
		p.dx=p.max_dx
	elseif p.dx<-p.max_dx then
		p.dx=-p.max_dx
	end
	p.y+=lim_spd(p.dy,p.max_dy)
	p.x+=p.dx
	
	--limit player to map
	if p.x<0 then
		p.x=0
	elseif p.x>map_end_x-p.w then
		p.x=map_end_x-p.w
	end
	
end

function draw_player()

	

	--running
	if p.running and not p.jumping then
		p.sp=p.run_anim[p.run_i]
		
		if p.run_cd==0 then
			p.run_i+=1
			if p.run_i>8 then
				p.run_i=1
			end
		end
		p.run_cd-=1
		if  p.run_cd==-1 then
			p.run_cd=3
		end
	elseif p.jumping then
		p.sp=6
	end
	
	--sliding
	if p.sliding then
		p.sp=7
	end
	
	--idle
	if not p.sliding and not 
	 p.running then
	 p.sp=4
	end
	
	--falling
	if p.falling then
		p.sp=22
	end
	
	--dead
	if p.dead then
		p.sp=8
		spr(p.sp,p.x,p.y,1,1,p.flp)
		
		if state=="game" then
			
			state="dead"
		end
		
		--return
	end

	spr(p.sp,p.x,p.y,1,1,p.flp)
end

function kill_player()
	p.dead=true
	p.dy=-5
	p.run_cd=-20
	sfx(3)
end

-->8
--collisions

--a: actor
--dr: direction
--
function collide_map(a,dr,flg)
	
	local x=a.x local y=a.y
	local w=a.w local h=a.h
	
	local x1=0 local y1=0
	local x2=0 local y2=0
	
	if dr=="left" then
		x1=x-2		y1=y+2
		x2=x-2		y2=y+h-1
		
		--test
		--r.x1=x1 r.y1=y1
		--r.x2=x2 r.y2=y2
	elseif dr=="right" then
		x1=x+w		y1=y+2
		x2=x+w	y2=y+h-1
	elseif dr=="up" then
		x1=x+1		y1=y-1
		x2=x+w-2	y2=y
		
		
	elseif dr=="down" then
		x1=x+1			y1=y+h
		x2=x+w-2		y2=y+h
	end
	
	--pixels to tiles
	x1/=8		y1/=8
	x2/=8		y2/=8
	
	if fget(mget(x1,y1), flag)
	or fget(mget(x1,y2), flag)
	or fget(mget(x2,y1), flag)
	or fget(mget(x2,y2), flag)
	then
	
		return true
	else
		return false
	end
end


function distance(x1,y1,x2,y2)
  return sqrt((x2-x1)^2+(y2-y1)^2)
end

--limits speed
function lim_spd(num,_max)
	return mid(-_max,num,_max)
end
-->8
--enemies

function make_enemy(_typ,_x,_y)
	local typ=_typ
	local x=_x
	local y=_y
	local sp=32
	
	--cooldown between frames
	local anim_cd=4
	
	--goomba
	if typ==0 then
		--empty
	end
	
	--koopa
	if typ==1 then
		sp=34
	end
	
	local e={
		typ=typ,
		x=x,
		y=y,
		w=8,
		h=8,
		dx=-.5,
		dy=0,
		flp=false,
		sp=sp,
		anim_cd=anim_cd,
		dead=false
	}
	
	add(enemies,e)
end

function update_enemy(e)

	local x1=e.x+3
	local y1=e.y-3
	
	local x2=p.x+3
	local y2=p.y+8
	
	--test code
	--r1.x1=x1+5+(abs(p.dx))
	--r1.y1=y1
	--r1.x2=x1-5-(abs(p.dx))
	--r1.y2=y1
	
	e.anim_cd-=1
	
	--left map bound
	if e.x<-e.w then 
		e.dead=true end
	
	--player bounces on head
	if abs(x1-x2)<5+(abs(p.dx)*1.5)
	 and abs(y1-y2)<2.5 
	 and not e.dead then
		e.dead=true
		e.anim_cd=10
		if btn(‚ùé) then
			p.dy=-(p.jump*1.1)
		else
			p.dy=-(p.jump*0.6)
		end
		p.jumping=true
		sfx(2)
	end
	
	--player hits e and dies
	if abs(e.x-p.x)<8 and 
	 abs(p.y-e.y)<1 and
	 not e.dead then
		kill_player()
		
	end
	
	r2.x1=e.x+(e.w/2)
	r2.y1=e.y
	r2.x2=p.x+(p.w/2)
	r2.y2=p.y

	--goomba
	if e.typ==0 then
		if e.anim_cd==0 then
			e.anim_cd=8
			e.flp=not e.flp
		end
		
	end
	
	--koopa
	if e.typ==1 then
		if e.anim_cd==0 then
			
			e.anim_cd=10
			if not e.dead then
				e.sp+=1
					
				if e.sp>=36 then
					e.sp=34
				end
			end
		end
	end
	
	--map collision
	if collide_map(e,"left",0)
	 or collide_map(e,"right",0)
	 then
	 	e.dx*=-1
	 	if e.typ==1 then
	 		e.flp=not e.flp
	 	end
	end
	
	--dead
	if e.dead then
		e.dx=0
		
		if e.typ==0 then
			e.sp=33
				if e.anim_cd==1 then
				del(enemies,e)
				return
			end
		elseif e.typ==1 then
			e.sp=36
		end
		
	end
	
	e.x+=e.dx
	
	--test
	--r1.x1=x1 r1.y1=y1
	--r1.x2=x2 r1.y2=y2
end

function draw_enemy(e)
	spr(e.sp,e.x,e.y,1,1,e.flp)
end

function scan_enemies()

	for x=map_end_x,
	 map_start_x,-8 do
	 
	 	for y=map_start_y,
	 	 map_end_y,8 do
	 	 
	 	 	local s=mget(x/8,y/8)
	 		
	 		--flag 0 = block
	 		local f=fget(s,0)
	 		
	 		if f then
	 			make_block(x,y,s)
	 			
	 			
	 		else
	 			--make goomba
	 			if s==32 then
	 				make_enemy(0,x,y)
	 				mset(x/8,y/8,0)
	 			end
	 		
	 			--make koopa
	 			if s==34 then
	 				make_enemy(1,x,y)
	 				mset(x/8,y/8,0)
	 			end
	 		end
	 		
	 	end
	 	
	end
	
end
-->8
--pick ups

function init_coin(x,y)
	add(coins,{x=x*8,y=y*8,t=0})
end

function update_coin(c)
	if c.t>8 then
		del(coins,c)
		return
	end
	c.t+=1
end

function draw_coin(c)
	c.x-=c.x%8
	spr(48+c.t,c.x,c.y-12-c.t)
end

function init_p_up(k,x,y)
	
	local _dx=-.5
	
	--fire flower doesn't move
	if k==1 then _dx=0 end
	
	pu={
		k=k,
		x=x,
		y=y,
		dx=_dx,
		dy=0,
		w=8,
		h=8,
		sp=16+k
	}
	
	add(p_ups,pu)
end

function update_p_up(pu)

	if not collide_map(pu,"down",0)
	 then
	 	pu.dy+=grav
	 	
	else
		if pu.k==2 then
			pu.dy=-3
		else
			pu.dy=0
			--pu.y-=pu.y%8
		end
		pu.y-=pu.y%8
	end
	
	if collide_map(pu,"up",0) and
	 pu.dy<0 then
		pu.dy=0
	end
	
	if collide_map(pu,"left",0)
	 or collide_map(pu,"right",0)
	 then
	 	pu.dx*=-1
	end
	
	if abs(pu.x-p.x)<4 and 
	 abs(pu.y-p.y)<4 then
		del(p_ups,pu)
		sfx(4)
		return
	end
	
	pu.x+=pu.dx
	pu.y+=pu.dy
	
end

function draw_p_up(pu)
	spr(pu.sp,pu.x,pu.y)
end
-->8
--blocks

function scan_blocks()
	p_ups={48,16,17,18,19}
	for b in all(blocks) do
		r=rnd(100)
		
		if b.sp==81 then
			if r<75 then
				b.obj=48
			elseif r<90 then
				b.obj=16
			elseif r<95 then
				b.obj=17
			elseif r<98 then
				b.obj=18
			else
				b.obj=19
			end
		else
			if r<90 then
				b.obj=0
			else
				b.obj=48
			end
		end
		
	end
end

function make_block(x,y,sp)
	local b={
		x=x,
		y=y,
		obj=0,
		sp=sp,
		brok=false,
		t=0
	}
	add(blocks,b)
end

function update_block(b)
	local x1=b.x
	local y1=b.y
	
	local x2=p.x
	local y2=p.y
	
	if abs(x1-x2)<5
	 and abs(y1-y2+8)<2 then
		break_block(b)
	end
	
end

function break_block(b)
	local x=b.x/8
	local y=b.y/8
	
	if fget(mget(x,y),1) then
		
		if b.obj==0 then
			mset(x,y,0)
			del(blocks,b)
			p.dy=0
			sfx(5)
			return
		elseif b.obj==48 then
			init_coin(x,y)
			sfx(1)
		elseif b.obj==16 then
			init_p_up(0,x*8,8*(y-1))
			sfx(4)
		elseif b.obj==17 then
			init_p_up(1,x*8,8*(y-1))
			sfx(4)
		elseif b.obj==18 then
			init_p_up(2,x*8,8*(y-1))
			sfx(4)
		elseif b.obj==19 then
			init_p_up(3,x*8,8*(y-1))
			sfx(4)
		end
		
		mset(x,y,82)
	end

end
__gfx__
0000000000000000000000000000000000000000008887000088870000000000008778007ff47ffffff47ffffff47ff47ff47ff407777777777777707777bbb7
000000000088870000888700008887000088870000888880008888800088870000888800f442f4444442f4444442f442f442f4427babbbbbbb3b33b3077b7b7b
0070070000888880008888800088888000888880044ffff0044ffff000888880041ff140f442f4444442f4444442f442f442f4427babbbbbbb3b33b3007b7b7b
00077000044ffff0044ffff0044ffff0044ffff000ff440000ff4470044ffff004f44f40422242222222422222224222422242227babbbbbbb3b33b3000bb7bb
0007700000ff440000ff440000ff440000ff4400071881700718810000ff440000feef007ffffff47ffffff47ffffff47ffffff47babbbbbbb3b33b30000bbb7
007007000018880000888100008818000081880000111100001111000081887007188170f4444442f4444442f4444442f44444427babbbbbbb3b33b300000777
000000000011170000117100001711000071110004000040040000400011710000111100f4444442f4444442f4444442f44444427babbbbbbb3b33b300000077
00000000004004000004400000044000004004000000000000000000000004400400004042222222422222224222222242222222033333333333333000000007
0077770000888800000990000077770000700707000000000088870000000000000000007ffffff40aaaaaa00ffffff07fff47f407babbbbb3b33b30b3000000
0877778088aaaa88009aa9000b7777b00770070700000000008888800000000000000000f7ffff42a9aaaa94f4444442f4442f4207babbbbb3b33b30b3000000
888778888a2772a89aaaaaa9bbb77bbb7770007000000000044f1f000000000000000000ff444422a9a44a94f4444442f4442f4207babbbbb3b33b30b3000000
8888888888aaaa88094aa490bbbbbbbb077000000000000004fffff00000000000000000ff444422a9499a94f4444442f444242207babbbbb3b33b30b3000000
788778870088880000aaaa007bb77bb7077007700000000000ff44700000000000000000ff444422a99aa494f4444442f4427ff407babbbbb3b33b30b3000000
787777870003300009aaaa907b7777b70770070700000000071881000000000000000000ff444422a9944994f44444424227444207babbbbb3b33b30b3000000
0f2ff2f0030330300a9009a00f3ff3f00770077000000000001111000000000000000000f4222222a99aa994f44444427f4f444207babbbbb3b33b30b3000000
00ffff00003333009900009900ffff0077770700000000000400004000000000000000004222222204444440022222204224222207babbbbb3b33b30b3000000
00000000000000000990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00444400000000009470000009900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04444440000000009990000094700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
447447440000000090903bb099903bb00003bb000003b30000000000000000000000000000000000000000000000000000000000000000000000000000000000
4414414404444440009bb33b909bb33b00bb33b0003bbb3000000000000000000000000000000000000000000000000000000000000000000000000000000000
044ff4404474474400933bb300933bb30033bb3000b333b000000000000000000000000000000000000000000000000000000000000000000000000000000000
04ffff00041ff1400007333700073337007333700037773000000000000000000000000000000000000000000000000000000000000000000000000000000000
00400440440000440099779909997779000777000070007000000000000000000000000000000000000000000000000000000000000000000000000000000000
000790000007a0000077990000777a0000a7770000aaaa0000aa9900000990000000000000000000000000000000000000000000000000000000000000000000
00079000007a990000799900077999a00a7777700aaaaaa000aaa90000aa99000000000000000000000000000000000000000000000000000000000000000000
00079000007a99000799a9907799a999a77a7777aaa9aa790aa9aa9000aa99000000000000000000000000000000000000000000000000000000000000000000
0007900000a999000799a9907999a999777a7777aaa9aa790aa9aa9000aaa9000000000000000000000000000000000000000000000000000000000000000000
000a900000a999000a99a99079997999777a7777aaa9a7790aa9aa9000aa79000000000000000000000000000000000000000000000000000000000000000000
000a900000aa99000a997990a9997999777a7779aaa977790aa9a79000aa99000000000000000000000000000000000000000000000000000000000000000000
000a900000aa990000a999000a999990077777900a77779000aa790000a799000000000000000000000000000000000000000000000000000000000000000000
000a9000000aa00000a9990000999900007779000099990000aa9900000990000000000000000000000000000000000000000000000000000000000000000000
7ff47ffffff47ffffff47ff47ff47ff407777777777777707ccd7ccccccd7ccccccd7ccd7ccd7ccd0777777777777770000000007777bbb7b300000000000000
f442f4444442f4444442f442f442f4427babbbbbbb3b33b3cdd1cdddddd1cdddddd1cdd1cdd1cdd17b7bbbbbbb3b33b300000000077b7b7bb300000000000000
f442f4444442f4444442f442f442f4427babbbbbbb3b33b3cdd1cdddddd1cdddddd1cdd1cdd1cdd17b7bbbbbbb3b33b300000000007b7b7bb300000000000000
422242222222422222224222422242227babbbbbbb3b33b3d111d1111111d1111111d111d111d1117b7bbbbbbb3b33b300000000000bb7bbb300000000000000
7ffffff47ffffff47ffffff47ffffff47babbbbbbb3b33b37ccccccd7ccccccd7ccccccd7ccccccd7b7bbbbbbb3b33b3000000000000bbb7b300000000000000
f4444442f4444442f4444442f44444427babbbbbbb3b33b3cdddddd1cdddddd1cdddddd1cdddddd17b7bbbbbbb3b33b30000000000000777b300000000000000
f4444442f4444442f4444442f44444427babbbbbbb3b33b3cdddddd1cdddddd1cdddddd1cdddddd17b7bbbbbbb3b33b30000000000000077b300000000000000
422222224222222242222222422222220333333333333330d1111111d1111111d1111111d111111103333333333333300000000000000007b300000000000000
7ffffff40aaaaaa00ffffff07fff47f407babbbbb3b33b307ccccccd0aaaaaa00cccccc07cccd7cd07b7bbbbb3b33b300000000000000000b300000000000000
f7ffff42a9aaaa94f4444442f4442f4207babbbbb3b33b30c7ccccd1a99aa994cdddddd1cddd1cd107b7bbbbb3b33b300000000000000000b300000000000000
ff444422a9a44a94f4444442f4442f4207babbbbb3b33b30ccdddd11a9a44a94cdddddd1cddd1cd107b7bbbbb3b33b300000000000000000b300000000000000
ff444422a9499a94f4444442f444242207babbbbb3b33b30ccdddd11a949a494cdddddd1cddd1d1107b7bbbbb3b33b300000000000000000b300000000000000
ff444422a99aa494f4444442f4427ff407babbbbb3b33b30ccdddd11a9994994cdddddd1cdd17ccd07b7bbbbb3b33b300000000000000000b300000000000000
ff444422a9944994f44444424227444207babbbbb3b33b30ccdddd11a999a994cdddddd1d117ddd107b7bbbbb3b33b300000000000000000b300000000000000
f4222222a99aa994f44444427f4f444207babbbbb3b33b30cd111111a9994994cdddddd17cdcddd107b7bbbbb3b33b300000000000000000b300000000000000
4222222204444440022222204224222207babbbbb3b33b30d11111110444444001111110d11d111107b7bbbbb3b33b300000000000000000b300000000000000
76657666666576666665766576657665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
65506555555065555550655065506550000000000777700000000000000000000000000000000000000000000000000000000000000000000000000000000000
65506555555065555550655065506550000077707766670000000000000000000000000000000000000000000000000000000000000000000000000000000000
50005000000050000000500050005000000777777666670000777760000000000000000000000000000000000000000000000000000000000000000000000000
76666665766666657666666576666665007777666666660077666666600000000000000000000000000000000000000000000000000000000000000000000000
65555550655555506555555065555550007776666677766776666666660000000000000000000000000000000000000000000000000000000000000000000000
65555550655555506555555065555550007776666676666766666666660000000000000000000000000000000000000000000000000000000000000000000000
50000000500000005000000050000000000776666766666766666666666000000000000000000000000000000000000000000000000000000000000000000000
766666650aaaaaa00666666076665765000777666666666766666667776000000000000000000000000000000000000000000000000000000000000000000000
67666650a9aaaa946555555065550650007776666666677766666676666000000000000000000000000000000000000000000000000000000000000000000000
66555500a9a44a946555555065550650007666666666677666666766666666000000000000000000000000000000000000000000000000000000000000000000
66555500a9499a946555555065550500007666666666776666666666666666660000000000000000000000000000000000000000000000000000000000000000
66555500a99aa4946555555065507665007666666666666666666666666666000000000000000000000000000000000000000000000000000000000000000000
66555500a99449946555555050075550066666660000000006666000000000000000000000000000000000000000000000000000000000000000000000000000
65000000a99aa9946555555076565550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50000000044444400000000050050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000088880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000088888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000004ff1f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000044fff4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000ff444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000fffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888818881888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08800018881000880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
080000a111a000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000110001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00001110001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00001100000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00044400000444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000303030301010000000000000000000001030101010100000000000000000000000000000000000000000000000000000000000000000003030303010101010101010100000000010301010101010101010101000000000303030300000000000000000000000001030101000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000064656667000000000000000000000064656667000000000000000000000064656667000000000000000000000000006465666700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d4e0000
00007475767700000000000000000000007475767700000000000000000000007475767700000000000000000000000000747576770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e0000
00000000000000000000005100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000404141414141410000004041425100000000000000000000000051000000000000000000000000000000000000000000000000000000005050000000004e0000
000000000000003939393a0000000000000000000000006465666700000000000000000000000000006465666700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040414200000000435151430000000000000000505050000000004e0000
00000000000000000000000000000000000000000000007475767700000000000000000000000000007475767700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050505050000000004e0000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005050505050000000004e0000
00000000000000000043514351430000000000000000000000000000000000000000000044450000000000000000000044450000000000000000000000435143000000000000000000000000004300000000004042000000510051005100000043000000000000000000004042000000000000505050505050000000004e0000
00000000000000000000000000000000000000000000000000000000444500000000000054550000000000000000000054550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050505050505050000000004e0000
00000000000000000000000000000000000044450000000000000000545500000000000054550000000000000000000054550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004445005050505050505050000000004e0000
1900000000000000000000000000000020005455000020000020000054550020000022005455000000002200000000005455000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000545550505050505050505000000000500000
5353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
5353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353535353
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d4e0000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e0000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e0000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e0000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e0000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e0000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e0000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e0000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e0000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000560000
5959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959
5959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959595959
__sfx__
000200000f0101001012010120101501017010190101b0101d0101e0101f010203002130024300243000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000300002052020520285202852027500284002840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00010000047100471005710077100a7100f710157101f7101f7101f71021710247102a7102d710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00030000220501e050220501e050220501d050160001600016000160001600016000140001400012000120000f000120000f0000d000120000f0000d000120000f0000d000120000f0000d000120000f00000000
000300000131001310023100331006310093100f310113100c3100f3100f310103101231015310193101c31016310173101a3101b3101e3102131024310273100000000000000000000000000000000000000000
0002000032610016102b61009610246100e6101c61012610156100e61016610086101561001610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000100021000310004100071000b100071000f1000a100141000e1001c10014100221002510028100291001c0001c0001b00019000140000d0001b7001b7001c700000000000000000000000000000000
